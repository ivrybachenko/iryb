{"version":3,"sources":["views/dev_in_progress/DevInProgress.js","views/not_found/NotFound.js","layouts/base_layout/BaseLayout.js","layouts/fullscreen_layout/FullscreenLayout.js","router/Router.js","serviceWorker.js","index.js"],"names":["DevInProgress","className","NotFound","href","BaseLayout","props","Navbar","expand","variant","bg","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","content","AppRouter","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAGe,SAASA,IACpB,OACI,yBAAKC,UAAU,kFACX,yBAAKA,UAAU,aAAf,QACA,yBAAKA,UAAU,aAAf,MACA,yBAAKA,UAAU,aAAf,a,kBCFG,SAASC,IACpB,OACI,yBAAKD,UAAU,kFACX,yBAAKA,UAAU,aAAf,QACA,yBAAKA,UAAU,aAAf,OACA,yBAAKA,UAAU,aAAf,SACA,yBAAKA,UAAU,yCACX,yBAAKA,UAAU,0FAAf,OAGA,0BAAMA,UAAU,oBAAhB,oCAGA,yBAAKA,UAAU,yFACX,kBAAC,IAAD,QAGR,yBAAKA,UAAU,QACX,uBAAGE,KAAK,IAAIF,UAAU,aAAtB,WACA,uBAAGE,KAAK,IAAIF,UAAU,aAAtB,kB,0BCnBD,SAASG,EAAWC,GAC/B,OACE,yBAAKJ,UAAU,UACX,kBAACK,EAAA,EAAD,CAAQC,OAAO,KAAKC,QAAQ,OAAOC,GAAG,QAClC,kBAACH,EAAA,EAAOI,MAAR,CAAcP,KAAK,KAAnB,QAA4B,0BAAMF,UAAU,gBAAhB,SAC5B,kBAACK,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKd,UAAU,WACX,kBAACc,EAAA,EAAIC,KAAL,CAAUb,KAAK,KAAf,SACA,kBAACY,EAAA,EAAIC,KAAL,CAAUb,KAAK,aAAf,YACA,kBAACY,EAAA,EAAIC,KAAL,CAAUb,KAAK,aAAf,aAEJ,kBAACY,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIC,KAAL,CAAUb,KAAK,wCACX,0BAAMF,UAAU,gBAAhB,cAKfI,EAAMY,S,MCrBF,SAASb,EAAWC,GAC/B,OACI,yBAAKJ,UAAU,UACVI,EAAMY,SCKJ,SAASC,IACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,CAAYH,QAAS,kBAACjB,EAAD,SAEzB,kBAAC,IAAD,CAAOoB,KAAK,KACR,kBAAC,EAAD,CAAkBH,QAAS,kBAAC,EAAD,WCR3BI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACV,EAAD,OAEFW,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.40d0372e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Files} from \"react-bootstrap-icons\";\r\n\r\nexport default function DevInProgress() {\r\n    return (\r\n        <div className=\"h-100 d-flex flex-column justify-content-center align-items-center text-center\">\r\n            <div className=\"display-1\">WORK</div>\r\n            <div className=\"display-5\">IN</div>\r\n            <div className=\"display-4\">PROGRESS</div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Files } from 'react-bootstrap-icons';\r\n\r\nimport './NotFound.css';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div className=\"h-100 d-flex flex-column justify-content-center align-items-center text-center\">\r\n            <div className=\"display-1\">PAGE</div>\r\n            <div className=\"display-5\">NOT</div>\r\n            <div className=\"display-4\">FOUND</div>\r\n            <div className=\"w-75 mt-4 mb-3 text-center d-flex url\">\r\n                <div className=\"d-inline-flex mr-2 h-100 justify-content-center align-items-center py-1 px-3 url-label\">\r\n                    URL\r\n                </div>\r\n                <span className=\"flex-grow-1 py-1\">\r\n                    http://localhost:3000/nosuchpage\r\n                </span>\r\n                <div className=\"d-inline-flex ml-2 h-100 justify-content-center align-items-center py-1 px-3 url-copy\">\r\n                    <Files />\r\n                </div>\r\n            </div>\r\n            <div className=\"mt-3\">\r\n                <a href=\"/\" className=\"link mx-4\">Go home</a>\r\n                <a href=\"#\" className=\"link mx-4\">Refresh page</a>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nimport './BaseLayout.css'\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\n\r\nexport default function BaseLayout(props) {\r\n    return (\r\n      <div className=\"layout\">\r\n          <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\r\n              <Navbar.Brand href=\"/\">iRyb.<span className=\"accent-light\">TECH</span></Navbar.Brand>\r\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n              <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                  <Nav className=\"mr-auto\">\r\n                      <Nav.Link href=\"/\">About</Nav.Link>\r\n                      <Nav.Link href=\"/projects\">Projects</Nav.Link>\r\n                      <Nav.Link href=\"/contacts\">Contacts</Nav.Link>\r\n                  </Nav>\r\n                  <Nav>\r\n                      <Nav.Link href=\"https://github.com/ivrybachenko/iryb\">\r\n                          <span className=\"accent-light\">Github</span>\r\n                      </Nav.Link>\r\n                  </Nav>\r\n              </Navbar.Collapse>\r\n          </Navbar>\r\n          {props.content}\r\n      </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nimport './FullscreenLayout.css'\r\n\r\nexport default function BaseLayout(props) {\r\n    return (\r\n        <div className=\"layout\">\r\n            {props.content}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport DevInProgress from \"../views/dev_in_progress/DevInProgress\";\r\nimport NotFound from \"../views/not_found/NotFound\";\r\nimport BaseLayout from \"../layouts/base_layout/BaseLayout\";\r\nimport FullscreenLayout from \"../layouts/fullscreen_layout/FullscreenLayout\";\r\n\r\nexport default function AppRouter() {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <BaseLayout content={<DevInProgress />}/>\r\n                </Route>\r\n                <Route path=\"*\">\r\n                    <FullscreenLayout content={<NotFound />}/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/root.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport AppRouter from './router/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppRouter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}